# Install required library if not present
!pip install -q fpdf2

# Step 1: Import necessary libraries
import requests
import time
from PIL import Image
from IPython.display import display, HTML
from io import BytesIO
import ipywidgets as widgets
from ipywidgets import Output, VBox, HBox
import webcolors
from google.colab import files
from fpdf import FPDF

# Global list for selected images
selected_images = []

# Global seed manager
seed_manager = {'current': 42}

# Step 2: Set up API keys
DEEPAI_API_KEY = "your-deepai-api-key-here"  # Replace with real DeepAI key
HF_TOKEN = "your-huggingface-token-here"    # Replace with real Hugging Face token

# Step 3: Define the prompt template for image and text
prompt_template = """
Create a social media post for a content generating website, promoting a specific industry topic.
Product name: {product_name}
Industry topic: {industry_topic}
Key message: {key_message}
Written tone: {tone}
Image color scheme: {color_scheme}
Special requirements: {special_requirements}

Output:
1. A short, engaging social media caption (50-100 words) that promotes the {industry_topic} content, aligns with the {tone} tone, incorporates the {key_message}, and reflects the {special_requirements}.
2. A detailed image prompt for AI image generators, describing a photorealistic, high-detail 1024x1024 image showcasing the {industry_topic} in a {tone} atmosphere, using a {color_scheme} color palette for the background and decorative elements, with the {key_message} subtly integrated (e.g., text overlay or thematic elements), and incorporating {special_requirements}.
3. A detailed description or guide for the {industry_topic}, including a list of key points or steps, adjusted to reflect {special_requirements}.
"""

# Step 4: Function to convert RGB to color name or description
def rgb_to_color_name(rgb):
    try:
        return webcolors.rgb_to_name(rgb)
    except ValueError:
        return f"RGB({rgb[0]}, {rgb[1]}, {rgb[2]})"

# Step 5: Function to generate content for a single page
def generate_page_content(product_name, industry_topic, key_message, tone, color_scheme, special_requirements, page_usage):
    color_scheme_desc = ", ".join([rgb_to_color_name(color) for color in color_scheme])
    content_prompt = prompt_template.format(
        product_name=product_name,
        industry_topic=industry_topic,
        key_message=key_message,
        tone=tone,
        color_scheme=color_scheme_desc,
        special_requirements=special_requirements or "none"
    )
    # Simulate LLM response
    caption = (
        f"Discover {industry_topic} with {product_name}! {key_message} "
        f"Explore our engaging content for a {tone} experience. "
        f"{special_requirements + ' ' if special_requirements else ''}"
        f"Check out more at {product_name.lower()}.com! #Content #{industry_topic.replace(' ', '')}"
    )
    if page_usage.lower() == "promo":
        image_prompt = (
            f"A photorealistic 1024x1024 social media graphic for promotional use, showcasing a visually appealing representation of {industry_topic}, "
            f"set in a {tone} atmosphere. The background and decorative elements (e.g., borders, accents) are strictly dominated by a vivid {color_scheme_desc} color palette, "
            f"ensuring {color_scheme_desc} is the primary and most prominent color scheme for the background and decorations, while the main subject retains authentic colors. "
            f"The {key_message} is subtly integrated via elegant text overlay or thematic elements in {color_scheme_desc}. "
            f"{special_requirements + ', ' if special_requirements else ''}high detail, vibrant lighting, modern and professional setting."
        )
    else:  # guide or other usage
        image_prompt = (
            f"A photorealistic 1024x1024 image of a styled content page for {industry_topic}, designed for {page_usage} use, "
            f"displaying the title '{industry_topic}', a neatly organized list of key points or steps, and descriptive text. "
            f"The background and decorative elements (e.g., borders, subtle illustrations) vividly feature a {color_scheme_desc} color palette as the dominant scheme, "
            f"ensuring {color_scheme_desc} is prominently visible in the background and decorations, while the main subject imagery retains natural colors. "
            f"Use {tone} typography, high detail, clean and professional layout, as if from a professional publication. "
            f"{special_requirements + ', ' if special_requirements else ''}."
        )
    guide_text = (
        f"Key Points for {industry_topic}:\n"
        f"- Define the core concept of {industry_topic}.\n"
        f"- Highlight key trends or features relevant to the industry.\n"
        f"- Provide actionable insights or steps for engagement.\n"
        f"- Include relevant tools or resources for further exploration.\n"
        f"{special_requirements + '\n' if special_requirements else ''}\n"
        f"Steps:\n"
        f"1. Research the latest developments in {industry_topic}.\n"
        f"2. Identify target audience needs and preferences.\n"
        f"3. Create engaging content tailored to {industry_topic}.\n"
        f"4. Share and promote through relevant channels.\n"
        f"5. Monitor feedback and adjust strategies accordingly."
    )
    return caption, image_prompt, guide_text

# Step 6: Function to display an image in Colab
def display_image(source, source_type="url"):
    try:
        if source_type == "url":
            response = requests.get(source)
            response.raise_for_status()
            img = Image.open(BytesIO(response.content))
        else:
            img = Image.open(source)
        img = img.resize((512, 512))
        display(img)
    except Exception as e:
        print(f"Error displaying image: {str(e)}")

# Step 7: Function to generate image using Pollinations
def get_pollinations_image(image_prompt, seed=42):
    try:
        gen_url = f"https://pollinations.ai/p/{image_prompt.replace(' ', '%20')}?width=1024&height=1024&seed={seed}"
        return gen_url
    except Exception as e:
        return f"Error generating Pollinations image: {str(e)}"

# Step 8: Function to create and download PDF with selected images
def create_pdf_and_download():
    pdf = FPDF()
    for idx, url in enumerate(selected_images, 1):
        try:
            response = requests.get(url)
            response.raise_for_status()
            img = Image.open(BytesIO(response.content))
            img_filename = f"temp_img_{idx}.png"
            img.save(img_filename)
            pdf.add_page()
            pdf.image(img_filename, x=10, y=10, w=190)
        except Exception as e:
            print(f"Error adding image to PDF: {str(e)}")
    pdf_filename = "selected_content_images.pdf"
    pdf.output(pdf_filename)
    files.download(pdf_filename)

# Step 9: Create interactive interface
product_name_widget = widgets.Text(value="ContentGenius", description="Product Name:")
industry_topic_widget = widgets.Text(value="Technology", description="Industry Topic:")
key_message_widget = widgets.Text(value="Create with ease!", description="Key Message:")
tone_widget = widgets.Text(value="friendly", description="Tone:")
special_requirements_widget = widgets.Textarea(value="", description="Special Requirements:", placeholder="e.g., modern design, specific keywords, minimalistic style")
num_pages_widget = widgets.IntText(value=2, description="Number of Pages:", min=1)

# Page usage management
page_usages = []
page_usage_container = VBox()

def update_page_usage_container():
    children = []
    for i, usage in enumerate(page_usages, 1):
        usage.description = f"Page {i} Usage:"
        children.append(usage)
    children.append(add_page_button)
    page_usage_container.children = children

def add_page_usage(b=None):
    if len(page_usages) < num_pages_widget.value:
        new_usage = widgets.Text(value="promo" if len(page_usages) == 0 else "guide", description=f"Page {len(page_usages) + 1} Usage:")
        page_usages.append(new_usage)
        update_page_usage_container()

def on_num_pages_change(change):
    while len(page_usages) < change['new']:
        add_page_usage()
    while len(page_usages) > change['new']:
        page_usages.pop()
    update_page_usage_container()

num_pages_widget.observe(on_num_pages_change, names='value')
add_page_button = widgets.Button(description="Add Page Usage")
add_page_button.on_click(add_page_usage)
add_page_usage()

# Color management
color_pickers = []
color_container = VBox()

def update_color_container():
    children = []
    for i, cp in enumerate(color_pickers, 1):
        cp.description = f"Color {i}:"
        delete_button = widgets.Button(description="Delete")
        def on_delete(b, cp=cp):
            if len(color_pickers) > 1:
                color_pickers.remove(cp)
                update_color_container()
        delete_button.on_click(on_delete)
        children.append(HBox([cp, delete_button]))
    children.append(add_color_button)
    color_container.children = children

def add_color_picker(b=None):
    new_picker = widgets.ColorPicker(value="#ff0000")
    color_pickers.append(new_picker)
    update_color_container()

add_color_button = widgets.Button(description="Add Color")
add_color_button.on_click(add_color_picker)
add_color_picker()

generate_button = widgets.Button(description="Generate")
output = Output()

def on_generate(button):
    with output:
        output.clear_output(wait=True)
        display(HTML(f"<h3>Generating all pages... This may take up to {20 * num_pages_widget.value} seconds.</h3>"))
        product_name = product_name_widget.value
        industry_topic = industry_topic_widget.value
        key_message = key_message_widget.value
        tone = tone_widget.value
        special_requirements = special_requirements_widget.value
        color_scheme = [webcolors.hex_to_rgb(cp.value) for cp in color_pickers]
        for i, usage_widget in enumerate(page_usages, 1):
            page_usage = usage_widget.value
            caption, image_prompt, guide_text = generate_page_content(
                product_name, industry_topic, key_message, tone, color_scheme, special_requirements, page_usage
            )
            def create_page_section(image_prompt, page_usage, i, caption, guide_text):
                regen_count = 0
                max_regen = 20
                page_image_output = Output()
                regen_label = widgets.Label(value=f"Regeneration attempts remaining: {max_regen - regen_count}")
                current_urls = [None, None]
                def generate_images_for_page():
                    with page_image_output:
                        print("Generating images... This may take up to 20 seconds.")
                    nonlocal current_urls, regen_count
                    seed1 = seed_manager['current']
                    seed_manager['current'] += 1
                    seed2 = seed_manager['current']
                    seed_manager['current'] += 1
                    url1 = get_pollinations_image(image_prompt, seed=seed1)
                    url2 = get_pollinations_image(image_prompt, seed=seed2)
                    current_urls = [url1, url2]
                    with page_image_output:
                        page_image_output.clear_output(wait=True)
                        display(HTML("<h4>Option 1</h4>"))
                        if "Error" not in str(url1):
                            display_image(url1)
                        display(HTML("<h4>Option 2</h4>"))
                        if "Error" not in str(url2):
                            display_image(url2)
                def download_image(url, option):
                    if url and "Error" not in str(url):
                        try:
                            response = requests.get(url)
                            response.raise_for_status()
                            filename = f"{industry_topic.replace(' ', '_')}_{page_usage}_option{option}.png"
                            with open(filename, 'wb') as f:
                                f.write(response.content)
                            files.download(filename)
                        except Exception as e:
                            print(f"Error downloading image: {str(e)}")
                def on_like1(b):
                    selected_images.append(current_urls[0])
                    download_image(current_urls[0], 1)
                    create_pdf_and_download()
                def on_like2(b):
                    selected_images.append(current_urls[1])
                    download_image(current_urls[1], 2)
                    create_pdf_and_download()
                def on_bad(b):
                    nonlocal regen_count
                    if regen_count < max_regen:
                        regen_count += 1
                        regen_label.value = f"Regeneration attempts remaining: {max_regen - regen_count}"
                        generate_images_for_page()
                    else:
                        with page_image_output:
                            print("Maximum regenerations reached.")
                button1 = widgets.Button(description="I like this 😊", style={'button_color': 'green'})
                button1.on_click(on_like1)
                button2 = widgets.Button(description="I like that 😊", style={'button_color': 'green'})
                button2.on_click(on_like2)
                bad_button = widgets.Button(description="Both is bad 😞", style={'button_color': 'red'})
                bad_button.on_click(on_bad)
                feedback_box = HBox([button1, button2, bad_button])
                generate_images_for_page()
                display(HTML(f"<h3>Page {i} ({page_usage.capitalize()})</h3>"))
                if page_usage.lower() != "guide":
                    display(HTML("<h4>Social Media Caption</h4>"))
                    print(caption)
                display(HTML(f"<h4>{page_usage.capitalize()} Image Options</h4>"))
                display(page_image_output)
                display(regen_label)
                display(feedback_box)
                if page_usage.lower() == "guide":
                    display(HTML("<h4>Guide Text</h4>"))
                    print(guide_text)
            create_page_section(image_prompt, page_usage, i, caption, guide_text)

generate_button.on_click(on_generate)

# Display the interface
display(VBox([product_name_widget, industry_topic_widget, key_message_widget, tone_widget, special_requirements_widget, num_pages_widget, page_usage_container, color_container, generate_button, output]))
