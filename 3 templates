# Step 1: Import necessary libraries
import requests
import random
import time
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript
import urllib.parse
import base64
import datetime
import os
import json
from collections import deque
import uuid

# Step 2: Define templates and state management with persistent storage
class TemplateManager:
    HISTORY_FILE = "social_media_history.json"
    REGISTRATION_FILE = "registration_codes.json"
    MAX_HISTORY = 3  # Keep only last 3 runs

    def __init__(self):
        # Define industry-specific templates
        self.templates = {
            "Food": {
                "fields": [
                    {"name": "recipe_name", "description": "Recipe Name:", "type": "text"},
                    {"name": "cuisine_type", "description": "Cuisine Type:", "type": "text"},
                    {"name": "cooking_time", "description": "Cooking Time:", "type": "text"},
                    {"name": "key_ingredients", "description": "Key Ingredients:", "type": "text"},
                    {"name": "tone", "description": "Tone:", "type": "dropdown", 
                     "options": ["friendly", "exciting", "comforting"]}
                ],
                "prompt": self.food_prompt
            },
            "Advertisement": {
                "fields": [
                    {"name": "product_name", "description": "Product Name:", "type": "text"},
                    {"name": "product_type", "description": "Product Type:", "type": "text"},
                    {"name": "key_features", "description": "Key Features:", "type": "text"},
                    {"name": "target_audience", "description": "Target Audience:", "type": "text"},
                    {"name": "tone", "description": "Tone:", "type": "dropdown", 
                     "options": ["professional", "trendy", "luxurious"]}
                ],
                "prompt": self.ad_prompt
            },
            "Book": {
                "fields": [
                    {"name": "book_title", "description": "Book Title:", "type": "text"},
                    {"name": "author_name", "description": "Author Name:", "type": "text"},
                    {"name": "genre", "description": "Genre:", "type": "text"},
                    {"name": "key_themes", "description": "Key Themes:", "type": "text"},
                    {"name": "tone", "description": "Tone:", "type": "dropdown", 
                     "options": ["mysterious", "inspirational", "dramatic"]}
                ],
                "prompt": self.book_prompt
            }
        }
        self.selected_template = None
        self.regeneration_count = 0
        self.max_regenerations = 20
        self.history = deque(maxlen=self.MAX_HISTORY)
        self.registration_codes = {}
        self.load_data()

    def load_data(self):
        """Load history and registration codes from files"""
        # Load history
        if os.path.exists(self.HISTORY_FILE):
            try:
                with open(self.HISTORY_FILE, 'r') as f:
                    history_data = json.load(f)
                    self.history = deque(history_data, maxlen=self.MAX_HISTORY)
            except:
                self.history = deque(maxlen=self.MAX_HISTORY)
        
        # Load registration codes
        if os.path.exists(self.REGISTRATION_FILE):
            try:
                with open(self.REGISTRATION_FILE, 'r') as f:
                    self.registration_codes = json.load(f)
            except:
                self.registration_codes = {}
        else:
            # Generate master code if none exists
            self.registration_codes["master"] = str(uuid.uuid4())
            self.save_registration_codes()

    def save_history(self):
        """Save history to file"""
        with open(self.HISTORY_FILE, 'w') as f:
            json.dump(list(self.history), f)
            
    def save_registration_codes(self):
        """Save registration codes to file"""
        with open(self.REGISTRATION_FILE, 'w') as f:
            json.dump(self.registration_codes, f)

    def record_session(self, session_data):
        """Record a session to history"""
        session_data['images'] = [
            base64.b64encode(img).decode('utf-8') if img else None
            for img in session_data['images']
        ]
        self.history.append(session_data)
        self.save_history()

    def select_template(self, name):
        self.selected_template = name
        self.regeneration_count = 0
        
    def generate_code(self, user_id):
        """Generate and store a new registration code for a user"""
        code = str(uuid.uuid4())
        self.registration_codes[user_id] = code
        self.save_registration_codes()
        return code
        
    def verify_code(self, code):
        """Verify if registration code is valid"""
        return code in self.registration_codes.values()
    
    # Template-specific prompt generators
    def food_prompt(self, field_values, color_scheme):
        prompt = f"""
        Create a social media post for a recipe: {field_values['recipe_name']}.
        Cuisine: {field_values['cuisine_type']}
        Cooking Time: {field_values['cooking_time']}
        Key Ingredients: {field_values['key_ingredients']}
        Written tone: {field_values['tone']}
        Image color scheme: {color_scheme}

        Output:
        1. A short, engaging social media caption (50-100 words) about the recipe that aligns with the {field_values['tone']} tone.
        2. A detailed image prompt for AI image generators, describing a photorealistic, high-detail 1024x1024 image of the dish in a {field_values['tone']} atmosphere, using a {color_scheme} color palette.
        """
        # Simulated LLM output
        caption = (
            f"üç¥ Discover our delicious {field_values['recipe_name']} recipe! "
            f"Perfect for {field_values['cuisine_type']} cuisine lovers. "
            f"Ready in just {field_values['cooking_time']} with {field_values['key_ingredients']}. "
            f"#{field_values['cuisine_type'].replace(' ', '')} #Foodie"
        )
        image_prompt = (
            f"A photorealistic 1024x1024 image of {field_values['recipe_name']}, "
            f"{field_values['cuisine_type']} cuisine, featuring {field_values['key_ingredients']}, "
            f"in a {field_values['tone']} atmosphere with {color_scheme} color palette, "
            f"professional food photography style, shallow depth of field."
        )
        return prompt, caption, image_prompt

    def ad_prompt(self, field_values, color_scheme):
        prompt = f"""
        Create an advertisement for: {field_values['product_name']} ({field_values['product_type']}).
        Key Features: {field_values['key_features']}
        Target Audience: {field_values['target_audience']}
        Written tone: {field_values['tone']}
        Image color scheme: {color_scheme}

        Output:
        1. A short, compelling ad copy (50-100 words) targeting {field_values['target_audience']} with a {field_values['tone']} tone.
        2. A detailed image prompt for AI image generators, describing a photorealistic, high-detail 1024x1024 advertisement image showing {field_values['product_name']} in use, with {color_scheme} color palette.
        """
        # Simulated LLM output
        caption = (
            f"‚ú® Introducing our new {field_values['product_name']} {field_values['product_type']}! "
            f"Perfect for {field_values['target_audience']}. Features: {field_values['key_features']}. "
            f"Experience the difference today. #{field_values['product_type'].replace(' ', '')} #NewProduct"
        )
        image_prompt = (
            f"A photorealistic 1024x1024 advertisement image of {field_values['product_name']} "
            f"({field_values['product_type']}) being used by {field_values['target_audience']}, "
            f"highlighting {field_values['key_features']}, {field_values['tone']} atmosphere, "
            f"{color_scheme} color palette, professional product photography."
        )
        return prompt, caption, image_prompt

    def book_prompt(self, field_values, color_scheme):
        prompt = f"""
        Create a social media post for the book: {field_values['book_title']} by {field_values['author_name']}.
        Genre: {field_values['genre']}
        Key Themes: {field_values['key_themes']}
        Written tone: {field_values['tone']}
        Image color scheme: {color_scheme}

        Output:
        1. A short, engaging book description (50-100 words) in a {field_values['tone']} tone.
        2. A detailed image prompt for AI image generators, describing a photorealistic, high-detail 1024x1024 book cover design with {color_scheme} color palette.
        """
        # Simulated LLM output
        caption = (
            f"üìö New Release: {field_values['book_title']} by {field_values['author_name']}! "
            f"A {field_values['genre']} novel exploring {field_values['key_themes']}. "
            f"Available now at major retailers. #{field_values['genre'].replace(' ', '')} #BookLover"
        )
        image_prompt = (
            f"A photorealistic 1024x1024 book cover for '{field_values['book_title']}' by {field_values['author_name']}, "
            f"{field_values['genre']} genre, themes: {field_values['key_themes']}, "
            f"{field_values['tone']} atmosphere, {color_scheme} color palette, "
            f"professional book cover design with title and author name clearly visible."
        )
        return prompt, caption, image_prompt

# Step 3: Create template manager instance
template_manager = TemplateManager()

# Step 4: Create UI components
form_style = {'description_width': '150px'}
input_width = '90%'

# Registration system
class RegistrationSystem:
    def __init__(self):
        self.logged_in = False
        self.user_id = None
        self.create_widgets()
        
    def create_widgets(self):
        # Login widgets
        self.code_input = widgets.Password(
            description="Registration Code:",
            style=form_style,
            layout=widgets.Layout(width=input_width)
        )
        self.login_btn = widgets.Button(
            description="Login",
            button_style='primary',
            layout=widgets.Layout(width='150px')
        )
        self.login_status = widgets.Output()
        
        # Admin panel widgets
        self.user_id_input = widgets.Text(
            description="User ID:",
            style=form_style,
            layout=widgets.Layout(width='300px')
        )
        self.generate_btn = widgets.Button(
            description="Generate Code",
            button_style='info',
            layout=widgets.Layout(width='150px')
        )
        self.admin_output = widgets.Output()
        
        # Attach handlers
        self.login_btn.on_click(self.on_login)
        self.generate_btn.on_click(self.on_generate_code)
    
    def on_login(self, btn):
        code = self.code_input.value.strip()
        if template_manager.verify_code(code):
            self.logged_in = True
            self.user_id = [k for k, v in template_manager.registration_codes.items() if v == code][0]
            with self.login_status:
                display(HTML("<div style='color:green;padding:10px'>Login successful!</div>"))
            display_main_app()
        else:
            with self.login_status:
                display(HTML("<div style='color:red;padding:10px'>Invalid code. Please try again.</div>"))
    
    def on_generate_code(self, btn):
        user_id = self.user_id_input.value.strip()
        if not user_id:
            with self.admin_output:
                display(HTML("<div style='color:red;padding:10px'>Please enter a User ID</div>"))
            return
            
        code = template_manager.generate_code(user_id)
        with self.admin_output:
            self.admin_output.clear_output()
            display(HTML(
                f"<div style='background:#e8f5e9;padding:15px;border-radius:5px;margin-top:10px'>"
                f"<b>Generated Code for {user_id}:</b><br>"
                f"<code style='font-size:18px'>{code}</code><br>"
                f"<small>Provide this code to the user for registration</small>"
                f"</div>"
            ))
    
    def show_login_form(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>üîí Registration Required</h2>"),
            widgets.HTML("<p>Enter your registration code to access the content generator</p>"),
            self.code_input,
            self.login_btn,
            self.login_status
        ])
    
    def show_admin_panel(self):
        return widgets.VBox([
            widgets.HTML("<h3 style='color:#2E86e1; margin-top:0'>üîë Admin Panel</h3>"),
            widgets.HTML("<p>Generate registration codes for users:</p>"),
            self.user_id_input,
            self.generate_btn,
            self.admin_output
        ])

# Create registration system
registration = RegistrationSystem()

# Create dynamic form area
dynamic_form_output = widgets.Output()

# Create color scheme picker
color_scheme = widgets.ColorPicker(
    concise=False,
    value='#4682B4',  # Steel blue
    description="Color Scheme:",
    style=form_style
)

# Create template selection
template_dropdown = widgets.Dropdown(
    options=list(template_manager.templates.keys()),
    description="Industry Template:",
    style=form_style,
    layout=widgets.Layout(width=input_width)
)

# Create output display areas
caption_output = widgets.Output()
prompt_output = widgets.Output()
image_output = widgets.Output()
status_output = widgets.Output()
feedback_output = widgets.Output()
history_output = widgets.Output()

# Create action buttons
generate_btn = widgets.Button(
    description="‚ú® Generate Content",
    button_style='success',
    icon='bolt',
    layout=widgets.Layout(width='250px', margin='20px 0 0 0')
)

# Create feedback buttons
like_this_btn = widgets.Button(
    description="üëç I like this",
    button_style='success',
    tooltip="Download first image",
    layout=widgets.Layout(width='150px')
)

like_that_btn = widgets.Button(
    description="üëç I like that",
    button_style='success',
    tooltip="Download second image",
    layout=widgets.Layout(width='150px')
)

both_bad_btn = widgets.Button(
    description="üëé Both bad",
    button_style='danger',
    tooltip="Regenerate new versions",
    layout=widgets.Layout(width='150px')
)

feedback_buttons = widgets.HBox(
    [like_this_btn, like_that_btn, both_bad_btn],
    layout=widgets.Layout(justify_content='center', margin='20px 0')
)

# Create tab navigation
tab_nav = widgets.ToggleButtons(
    options=['Content Generator', 'Past Records', 'Admin Panel'],
    value='Content Generator',
    button_style='',
    tooltips=['Create new content', 'View history', 'Generate registration codes'],
    layout=widgets.Layout(width='100%', margin='0 0 20px 0')
)

# Step 5: Assemble UI components
content_generator_tab = widgets.VBox([
    widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>üì± Industry-Specific Content Generator</h2>"),
    widgets.HTML("<i>Select an industry template and generate content</i>"),
    template_dropdown,
    dynamic_form_output,
    color_scheme,
    generate_btn,
    widgets.HTML("<h3 style='border-bottom:1px solid #eee; padding-bottom:10px; margin-top:20px'>Generated Content</h3>"),
    widgets.Accordion(children=[caption_output, prompt_output],
                     titles=('üìù Social Media Caption', 'üé® Image Prompt')),
    widgets.HTML("<h4 style='margin:25px 0 10px 0'>Generated Images</h4>"),
    status_output,
    image_output,
    feedback_output
], layout=widgets.Layout(padding='20px'))

past_records_tab = widgets.VBox([
    widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>üìö Past Records</h2>"),
    widgets.HTML("<i>History of your last 3 generated image sets</i>"),
    history_output
], layout=widgets.Layout(padding='20px'))

admin_panel_tab = registration.show_admin_panel()

# Create tab container
tab_container = widgets.VBox([content_generator_tab])

# Step 6: Create UI event handlers
def download_image(image_bytes, filename_prefix="image"):
    """Trigger image download from browser"""
    filename = f"{filename_prefix}_{int(time.time())}.png"
    b64 = base64.b64encode(image_bytes).decode()
    payload = f"data:image/png;base64,{b64}"
    js = f"""
    var a = document.createElement('a');
    a.href = '{payload}';
    a.download = '{filename}';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    """
    display(Javascript(js))

def generate_dynamic_form(template_name):
    """Generate form fields based on selected template"""
    dynamic_form_output.clear_output()
    if not template_name:
        return
        
    template = template_manager.templates[template_name]
    form_widgets = []
    
    for field in template['fields']:
        if field['type'] == 'text':
            widget = widgets.Text(
                description=field['description'],
                style=form_style,
                layout=widgets.Layout(width=input_width)
            )
        elif field['type'] == 'dropdown':
            widget = widgets.Dropdown(
                options=field['options'],
                description=field['description'],
                style=form_style,
                layout=widgets.Layout(width=input_width)
            )
        form_widgets.append(widget)
    
    with dynamic_form_output:
        display(widgets.VBox(form_widgets))
    
    # Store reference to widgets
    dynamic_form_output.field_widgets = {field['name']: widget for field, widget in zip(template['fields'], form_widgets)}

def generate_images():
    """Generate images based on selected template"""
    # Clear previous outputs
    caption_output.clear_output()
    prompt_output.clear_output()
    image_output.clear_output()
    feedback_output.clear_output()
    status_output.clear_output()

    # Check template selection
    template_name = template_dropdown.value
    if not template_name:
        with status_output:
            display(HTML(
                "<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                "‚ö†Ô∏è Please select a template first!</div>"
            ))
        return

    # Check if form has been generated
    if not hasattr(dynamic_form_output, 'field_widgets'):
        with status_output:
            display(HTML(
                "<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                "‚ö†Ô∏è Please wait for form to load!</div>"
            ))
        return

    # Get field values
    field_values = {}
    for name, widget in dynamic_form_output.field_widgets.items():
        field_values[name] = widget.value
        if not field_values[name]:
            with status_output:
                display(HTML(
                    f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                    f"‚ö†Ô∏è Please fill in all fields! Missing: {name}</div>"
                ))
            return

    # Update template manager
    template_manager.select_template(template_name)
    template_data = template_manager.templates[template_name]

    # Show status
    with status_output:
        display(HTML(
            "<div style='text-align:center; color:#666; padding:10px'>"
            "<i class='fa fa-spinner fa-spin'></i> Generating content and images may take 20-40 seconds..."
            "</div>"
        ))

    # Get color name
    color_name = {
        '#ff6347': 'warm reds',
        '#4682b4': 'cool blues',
        '#32cd32': 'fresh greens'
    }.get(color_scheme.value.lower(), f"custom ({color_scheme.value})")

    # Generate content
    with caption_output:
        display(HTML(
            f"<div style='background:#f9f9f9; padding:15px; border-radius:5px; font-family:Arial'>"
            f"<i class='fa fa-spinner fa-spin'></i> Generating content...</div>"
        ))

    _, caption_text, image_prompt = template_data['prompt'](field_values, color_name)

    # Display caption
    with caption_output:
        caption_output.clear_output()
        display(HTML(
            f"<div style='background:#f9f9f9; padding:15px; border-radius:5px;"
            f"font-family:Arial; font-size:14px'>{caption_text}</div>"
        ))

    # Display prompt
    with prompt_output:
        display(HTML(
            f"<div style='background:#f5f7ff; padding:15px; border-radius:5px;"
            f"font-family:monospace; font-size:13px; white-space:pre-wrap'>{image_prompt}</div>"
        ))

    # Generate and display images
    with image_output:
        image_output.clear_output()
        display(HTML(
            f"<div style='text-align:center; margin:10px; color:#666'>"
            f"<i class='fa fa-spinner fa-spin'></i> Generating 2 unique image variations...</div>"
        ))

        # Generate 2 unique images
        image_widgets = []
        image_data = []  # Store image bytes for feedback

        for i in range(2):
            # Add some variation to each prompt
            variation_prompt = f"{image_prompt}, variation {i+1}, unique composition"

            # Generate image
            image_bytes, seed = get_pollinations_image(variation_prompt)
            image_data.append(image_bytes)

            if image_bytes is None:
                img_widget = widgets.HTML(
                    f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828; height:300px; display:flex; align-items:center; justify-content:center'>"
                    f"‚ùå Image failed to generate. Please try again.</div>"
                )
            else:
                # Create image widget
                img_widget = widgets.Image(
                    value=image_bytes,
                    format='png',
                    width=300,
                    height=300
                )

            caption = widgets.HTML(
                f"<div style='text-align:center; font-size:12px; margin-top:5px'>"
                f"Variation #{i+1}</div>"
            )
            image_widgets.append(widgets.VBox([img_widget, caption]))

        # Create grid layout
        grid = widgets.GridBox(
            image_widgets,
            layout=widgets.Layout(
                grid_template_columns='repeat(2, 320px)',
                grid_gap='20px',
                justify_content='center'
            )
        )

        with image_output:
            image_output.clear_output()
            display(grid)

        # Show feedback buttons
        with feedback_output:
            feedback_output.clear_output()
            display(feedback_buttons)

            # Store image data for feedback handlers
            feedback_output.image_data = image_data
            feedback_output.template_name = template_name
            feedback_output.session_data = {
                "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "template": template_name,
                "user_id": registration.user_id,
                "field_values": field_values,
                "images": image_data
            }

        # Save this session to history immediately
        template_manager.record_session(feedback_output.session_data)

def on_generate_clicked(btn):
    generate_btn.disabled = True
    try:
        generate_images()
    except Exception as e:
        with status_output:
            display(HTML(
                f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                f"üö´ Error: {str(e)}</div>"
            ))
    finally:
        generate_btn.disabled = False

def on_like_this_clicked(btn):
    if hasattr(feedback_output, 'image_data') and feedback_output.image_data[0]:
        download_image(feedback_output.image_data[0], f"{feedback_output.template_name}_1")
        with feedback_output:
            display(HTML(
                "<div style='background:#e8f5e9; padding:10px; border-radius:5px; color:#2e7d32; text-align:center'>"
                "‚úÖ First image downloaded!</div>"
            ))

def on_like_that_clicked(btn):
    if hasattr(feedback_output, 'image_data') and feedback_output.image_data[1]:
        download_image(feedback_output.image_data[1], f"{feedback_output.template_name}_2")
        with feedback_output:
            display(HTML(
                "<div style='background:#e8f5e9; padding:10px; border-radius:5px; color:#2e7d32; text-align:center'>"
                "‚úÖ Second image downloaded!</div>"
            ))

def on_both_bad_clicked(btn):
    if template_manager.regeneration_count >= template_manager.max_regenerations:
        with feedback_output:
            display(HTML(
                "<div style='background:#fff8e1; padding:10px; border-radius:5px; color:#f57f17; text-align:center'>"
                "‚ö†Ô∏è Maximum regenerations reached (20 attempts). Please select a new template.</div>"
            ))
        return

    template_manager.regeneration_count += 1
    with feedback_output:
        display(HTML(
            f"<div style='text-align:center; color:#666; padding:10px'>"
            f"<i class='fa fa-spinner fa-spin'></i> Regenerating images... "
            f"(Attempt {template_manager.regeneration_count}/{template_manager.max_regenerations})</div>"
        ))

    try:
        generate_images()
    except Exception as e:
        with feedback_output:
            display(HTML(
                f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                f"üö´ Error: {str(e)}</div>"
            ))

def display_history():
    """Display the history of generated images"""
    history_output.clear_output()
    with history_output:
        if not template_manager.history:
            display(HTML(
                "<div style='text-align:center; padding:40px; color:#666; font-style:italic'>"
                "No history found. Generate some images first!</div>"
            ))
            return

        display(HTML("<div style='history-container'>"))
        for i, session in enumerate(template_manager.history):
            # Convert base64 strings back to bytes for display
            images = []
            for img_base64 in session['images']:
                if img_base64:
                    images.append(base64.b64decode(img_base64))
                else:
                    images.append(None)

            display(HTML(
                f"<div class='history-card'>"
                f"<h3 style='border-bottom:1px solid #eee; padding-bottom:10px'>"
                f"Session {len(template_manager.history)-i} - {session['template']}</h3>"
                f"<p><b>Date:</b> {session['timestamp']}</p>"
                f"<p><b>User:</b> {session.get('user_id', 'N/A')}</p>"
            ))
            
            # Display field values
            if 'field_values' in session:
                display(HTML("<p><b>Parameters:</b></p><ul>"))
                for key, value in session['field_values'].items():
                    display(HTML(f"<li><b>{key.replace('_', ' ').title()}:</b> {value}</li>"))
                display(HTML("</ul>"))

            # Display images
            images_row = []
            for j, img_bytes in enumerate(images):
                if img_bytes:
                    img_widget = widgets.Image(
                        value=img_bytes,
                        format='png',
                        width=200,
                        height=200
                    )
                    download_btn = widgets.Button(
                        description=f"Download Image {j+1}",
                        layout=widgets.Layout(width='150px', margin='10px 0')
                    )
                    download_btn.on_click(lambda btn, img=img_bytes, idx=j:
                        download_image(img, f"{session['template']}_{idx+1}"))
                    images_row.append(widgets.VBox(
                        [img_widget, download_btn],
                        layout=widgets.Layout(align_items='center')
                    ))
            display(widgets.HBox(images_row, layout=widgets.Layout(justify_content='space-around')))
            display(HTML("</div><hr style='margin:20px 0'>"))
        display(HTML("</div>"))

def on_template_change(change):
    """Handle template change event"""
    if change['new']:
        generate_dynamic_form(change['new'])

def on_tab_change(change):
    """Handle tab navigation"""
    if change['new'] == 'Past Records':
        tab_container.children = [past_records_tab]
        display_history()
    elif change['new'] == 'Admin Panel':
        tab_container.children = [admin_panel_tab]
    else:
        tab_container.children = [content_generator_tab]

def display_main_app():
    """Display the main application after login"""
    display(tab_nav)
    display(tab_container)

# Attach event handlers
generate_btn.on_click(on_generate_clicked)
like_this_btn.on_click(on_like_this_clicked)
like_that_btn.on_click(on_like_that_clicked)
both_bad_btn.on_click(on_both_bad_clicked)
tab_nav.observe(on_tab_change, names='value')
template_dropdown.observe(on_template_change, names='value')

# Step 7: Display the UI
if registration.logged_in:
    display_main_app()
else:
    # Show master code at the top
    master_code = template_manager.registration_codes.get("master", "Not generated")
    display(HTML(
        f"<div style='background:#e3f2fd; padding:15px; border-radius:5px; margin-bottom:20px'>"
        f"<b>Master Registration Code:</b> {master_code}<br>"
        f"<small>Provide this to users for registration</small></div>"
    ))
    display(registration.show_login_form())

# Display initial template form if logged in
if registration.logged_in and template_dropdown.value:
    generate_dynamic_form(template_dropdown.value)

# Step 8: Image generation function (unchanged)
def get_pollinations_image(image_prompt, seed=None):
    try:
        if seed is None:
            seed = random.randint(0, 1000000)

        # Encode the prompt for URL
        encoded_prompt = urllib.parse.quote(image_prompt)

        # Use the direct image generation URL
        gen_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?seed={seed}&width=512&height=512"

        # Get the image
        response = requests.get(gen_url, timeout=60)
        response.raise_for_status()

        # Return image bytes and seed
        return response.content, seed
    except Exception as e:
        return None, f"Error generating image: {str(e)}"
