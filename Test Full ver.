# --------------------------------------------------------------
# 1. Install required packages (run once)
# --------------------------------------------------------------
!pip install -q fpdf2 webcolors pillow

# --------------------------------------------------------------
# 2. Imports
# --------------------------------------------------------------
import ipywidgets as widgets
from IPython.display import display, HTML, clear_output, Image
import json, os, hashlib, datetime, uuid, time
import requests
from io import BytesIO
from PIL import Image as PILImage
import webcolors
from google.colab import files
from fpdf import FPDF

# --------------------------------------------------------------
# 3. USER / TEMPLATE MANAGER
# --------------------------------------------------------------
class UserManager:
    USER_DB_FILE   = "user_database.json"
    TEMPLATE_DB_FILE = "templates.json"
    MASTER_USERNAME = "master123"
    DEFAULT_MASTER_PASSWORD = "master@123"

    def __init__(self):
        self.users = {}
        self.templates = {}
        self.current_user = None
        self.current_role = None
        self.load_users()
        self.load_templates()
        self.create_master_user()

    def load_users(self):
        if os.path.exists(self.USER_DB_FILE):
            try: self.users = json.load(open(self.USER_DB_FILE))
            except: self.users = {}
    def save_users(self):
        json.dump(self.users, open(self.USER_DB_FILE, 'w'))

    def load_templates(self):
        if os.path.exists(self.TEMPLATE_DB_FILE):
            try: self.templates = json.load(open(self.TEMPLATE_DB_FILE))
            except: self.templates = {}
    def save_templates(self):
        json.dump(self.templates, open(self.TEMPLATE_DB_FILE, 'w'))

    def create_master_user(self):
        if self.MASTER_USERNAME not in self.users:
            salt = os.urandom(16)
            pw = hashlib.pbkdf2_hmac('sha256',
                                    self.DEFAULT_MASTER_PASSWORD.encode(),
                                    salt, 100000)
            self.users[self.MASTER_USERNAME] = {
                "password": pw.hex(),
                "salt": salt.hex(),
                "industry_code": "ADMIN-001",
                "role": "master",
                "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            self.save_users()

    def create_user(self, username, password, industry_code=None):
        if username in self.users: return False, "Username already exists"
        role = "master" if username == self.MASTER_USERNAME else "client"
        salt = os.urandom(16)
        pw = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
        self.users[username] = {
            "password": pw.hex(),
            "salt": salt.hex(),
            "industry_code": industry_code or "",
            "role": role,
            "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.save_users()
        return True, f"Account created. Role: {role}"

    def authenticate(self, username, password):
        if username not in self.users: return False, "User not found"
        u = self.users[username]
        pw = hashlib.pbkdf2_hmac('sha256',
                                password.encode(),
                                bytes.fromhex(u['salt']), 100000)
        if pw.hex() != u['password']: return False, "Invalid password"
        self.current_user, self.current_role = username, u['role']
        return True, f"Login successful. Role: {u['role']}"

    def logout(self):
        self.current_user = self.current_role = None
        return "Logged out"

    def create_template(self, industry_code, content, assigned_to):
        if self.current_role != "master":
            return False, "Master only"
        if not industry_code.strip():
            return False, "Industry code required"
        if assigned_to not in self.users or self.users[assigned_to]['role'] != 'client':
            return False, "Invalid client username"
        
        self.templates[industry_code] = {
            "content": content,
            "assigned_to": assigned_to,
            "created_at": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.users[assigned_to]['industry_code'] = industry_code
        self.save_templates()
        self.save_users()
        return True, f"Template '{industry_code}' created and assigned to {assigned_to}"

    def delete_template(self, industry_code):
        if self.current_role != "master":
            return False, "Master only"
        if industry_code not in self.templates:
            return False, "Template not found"
        assigned_to = self.templates[industry_code]['assigned_to']
        del self.templates[industry_code]
        if self.users[assigned_to]['industry_code'] == industry_code:
            self.users[assigned_to]['industry_code'] = ""
        self.save_templates()
        self.save_users()
        return True, f"Template '{industry_code}' deleted"

    def get_template_by_industry(self, ic):
        return self.templates.get(ic, None)

    def get_client_list(self):
        return [u for u, data in self.users.items() if data['role'] == 'client']

    def update_user(self, username, cur_pwd, new_username=None, new_pwd=None):
        if username not in self.users: return False, "User not found"
        u = self.users[username]
        pw = hashlib.pbkdf2_hmac('sha256',
                                cur_pwd.encode(),
                                bytes.fromhex(u['salt']), 100000)
        if pw.hex() != u['password']: return False, "Wrong password"
        if new_username:
            if new_username.strip() == "" or new_username in self.users:
                return False, "Invalid or taken username"
            # update key
            self.users[new_username] = self.users.pop(username)
            if self.current_user == username:
                self.current_user = new_username
        if new_pwd:
            salt = os.urandom(16)
            pw = hashlib.pbkdf2_hmac('sha256', new_pwd.encode(), salt, 100000)
            u['password'], u['salt'] = pw.hex(), salt.hex()
        self.save_users()
        return True, "Account updated"


# --------------------------------------------------------------
# 4. HISTORY MANAGER â€“ saves per-page instantly
# --------------------------------------------------------------
class HistoryManager:
    HISTORY_FILE = "generation_history.json"
    MAX_SESSIONS = 3

    def __init__(self):
        self.history = {}
        self.load_history()

    def load_history(self):
        if os.path.exists(self.HISTORY_FILE):
            try: self.history = json.load(open(self.HISTORY_FILE))
            except: self.history = {}

    def save_history(self):
        json.dump(self.history, open(self.HISTORY_FILE, 'w'))

    def record_page(self, username, page_data):
        if username not in self.history:
            self.history[username] = []
        if not self.history[username] or "pages" not in self.history[username][-1]:
            self.history[username].append({
                "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "product": page_data.get("product", "ContentGenius"),
                "topic": page_data.get("topic", "Unknown"),
                "pages": []
            })
        self.history[username][-1]["pages"].append({
            "page": page_data["page"],
            "usage": page_data["usage"],
            "caption": page_data.get("caption"),
            "guide": page_data.get("guide"),
            "image_urls": page_data["image_urls"]  # now saves both URLs
        })
        if len(self.history[username]) > self.MAX_SESSIONS:
            self.history[username] = self.history[username][-self.MAX_SESSIONS:]
        self.save_history()

    def get_user_history(self, username):
        return self.history.get(username, [])


# --------------------------------------------------------------
# 5. IMAGE-GENERATION HELPERS
# --------------------------------------------------------------
selected_images = []
seed_manager = {'current': 42}

def rgb_to_color_name(rgb):
    try: return webcolors.rgb_to_name(rgb)
    except ValueError: return f"RGB({rgb[0]},{rgb[1]},{rgb[2]})"

def generate_page_content(product_name, industry_topic, key_message, tone,
                          color_scheme, special_requirements, page_usage):
    cs = ", ".join([rgb_to_color_name(c) for c in color_scheme])
    caption = (
        f"Discover {industry_topic} with {product_name}! {key_message} "
        f"Enjoy a {tone} experience. "
        f"{special_requirements + ' ' if special_requirements else ''}"
        f"Visit {product_name.lower()}.com! #Content #{industry_topic.replace(' ', '')}"
    )
    if page_usage.lower() == "promo":
        img_prompt = (
            f"A photorealistic 1024x1024 social media graphic for promotional use, showcasing {industry_topic}, "
            f"in a {tone} atmosphere. Background & decorations dominate with vivid {cs} palette; "
            f"main subject keeps natural colors. Subtly integrate \"{key_message}\" via text or theme. "
            f"{special_requirements + ', ' if special_requirements else ''}high detail, modern."
        )
    else:
        img_prompt = (
            f"A photorealistic 1024x1024 styled content page for {industry_topic}, usage: {page_usage}. "
            f"Title '{industry_topic}', organized key points, clean layout. Background & decorations "
            f"vividly feature {cs} palette; subject natural colors. {tone} typography, professional. "
            f"{special_requirements + ', ' if special_requirements else ''}."
        )
    guide = (
        f"Key Points for {industry_topic}:\n"
        f"- Core concept\n- Trends / features\n- Actionable steps\n- Resources\n"
        f"{special_requirements + '\n' if special_requirements else ''}\n"
        f"Steps:\n1. Research\n2. Identify audience\n3. Create content\n4. Share\n5. Iterate"
    )
    return caption, img_prompt, guide

def display_image(url):
    try:
        resp = requests.get(url, timeout=30)
        resp.raise_for_status()
        img = PILImage.open(BytesIO(resp.content)).resize((512, 512))
        display(img)
    except Exception as e:
        print(f"Image error: {e}")

def get_pollinations_image(prompt, seed=42):
    try:
        url = f"https://pollinations.ai/p/{prompt.replace(' ', '%20')}?width=1024&height=1024&seed={seed}"
        return url
    except Exception as e:
        return f"Error: {e}"

def create_pdf_and_download():
    pdf = FPDF()
    for i, url in enumerate(selected_images, 1):
        try:
            resp = requests.get(url)
            resp.raise_for_status()
            img = PILImage.open(BytesIO(resp.content))
            fn = f"tmp_{i}.png"
            img.save(fn)
            pdf.add_page()
            pdf.image(fn, x=10, y=10, w=190)
            os.remove(fn)
        except Exception as e:
            print(f"PDF error {i}: {e}")
    fn = "selected_content_images.pdf"
    pdf.output(fn)
    files.download(fn)


# --------------------------------------------------------------
# 6. MAIN UI CLASS â€“ ALL ERRORS FIXED
# --------------------------------------------------------------
form_style = {'description_width': '150px'}
input_width = '90%'

class AuthImageSystem:
    def __init__(self):
        self.um = UserManager()
        self.hm = HistoryManager()
        self.create_widgets()

    def create_widgets(self):
        # ---- auth ----
        self.su_user = widgets.Text(description="Username:",
                                    style=form_style,
                                    layout=widgets.Layout(width=input_width))
        self.su_pwd  = widgets.Password(description="Password:",
                                        style=form_style,
                                        layout=widgets.Layout(width=input_width))
        self.su_btn  = widgets.Button(description="Create Account",
                                      button_style='primary',
                                      layout=widgets.Layout(width='200px'))
        self.su_out  = widgets.Output()

        self.li_user = widgets.Text(description="Username:",
                                    style=form_style,
                                    layout=widgets.Layout(width=input_width))
        self.li_pwd  = widgets.Password(description="Password:",
                                        style=form_style,
                                        layout=widgets.Layout(width=input_width))
        self.li_btn  = widgets.Button(description="Login",
                                      button_style='primary',
                                      layout=widgets.Layout(width='200px'))
        self.li_out  = widgets.Output()

        self.logout_btn = widgets.Button(description="Logout",
                                         button_style='warning',
                                         icon='sign-out',
                                         layout=widgets.Layout(width='100px',
                                                              margin='20px 0 0 auto'))

        # ---- template mgmt (master) ----
        self.t_client_dd = widgets.Dropdown(description="Client:",
                                            style=form_style,
                                            layout=widgets.Layout(width=input_width))
        self.t_ic   = widgets.Text(description="Industry Code (Template ID):",
                                   style=form_style,
                                   layout=widgets.Layout(width=input_width),
                                   placeholder="e.g., TECH-123")
        self.t_cont = widgets.Textarea(description="Template Content:",
                                       style=form_style,
                                       layout=widgets.Layout(width=input_width, height='150px'))
        self.t_create = widgets.Button(description="Create Template",
                                       button_style='primary',
                                       layout=widgets.Layout(width='200px'))
        self.t_del_dd = widgets.Dropdown(description="Delete Template:",
                                         style=form_style,
                                         layout=widgets.Layout(width=input_width),
                                         options=[("Select", None)])
        self.t_del_btn = widgets.Button(description="Delete Template",
                                        button_style='danger',
                                        layout=widgets.Layout(width='200px'))
        self.t_out = widgets.Output()

        # ---- account mgmt ----
        self.acc_user = widgets.Text(description="New Username:",
                                     style=form_style,
                                     layout=widgets.Layout(width=input_width))
        self.acc_ic   = widgets.Text(description="Industry Code:",
                                     style=form_style,
                                     layout=widgets.Layout(width=input_width), disabled=True)
        self.acc_cur  = widgets.Password(description="Current Password:",
                                         style=form_style,
                                         layout=widgets.Layout(width=input_width))
        self.acc_new  = widgets.Password(description="New Password:",
                                         style=form_style,
                                         layout=widgets.Layout(width=input_width),
                                         placeholder="Leave blank to keep")
        self.acc_cnf  = widgets.Password(description="Confirm Password:",
                                         style=form_style,
                                         layout=widgets.Layout(width=input_width))
        self.acc_btn  = widgets.Button(description="Update Account",
                                       button_style='primary',
                                       layout=widgets.Layout(width='200px'))
        self.acc_out  = widgets.Output()

        # ---- generator widgets ----
        self.prod   = widgets.Text(value="ContentGenius", description="Product Name:")
        self.topic  = widgets.Text(value="Technology", description="Industry Topic:")
        self.msg    = widgets.Text(value="Create with ease!", description="Key Message:")
        self.tone   = widgets.Text(value="friendly", description="Tone:")
        self.spec   = widgets.Textarea(value="", description="Special Requirements:",
                                       placeholder="e.g., modern design")
        self.npages = widgets.IntText(value=2, description="Pages:", min=1)

        self.page_usages = []
        self.page_box = widgets.VBox()
        self.add_page_btn = widgets.Button(description="Add Page Usage")
        self.add_page_btn.on_click(self.add_page_usage)

        self.colors = []
        self.color_box = widgets.VBox()
        self.add_color_btn = widgets.Button(description="Add Color")
        self.add_color_btn.on_click(self.add_color_picker)

        self.gen_btn = widgets.Button(description="Generate", button_style='success')
        self.gen_out = widgets.Output()

        # ---- history widgets ----
        self.refresh_hist_btn = widgets.Button(description="Refresh History",
                                                button_style='info',
                                                layout=widgets.Layout(width='150px'))
        self.refresh_hist_btn.on_click(self.display_history)
        self.hist_out = widgets.Output()

        # ---- bind handlers ----
        self.su_btn.on_click(self.on_signup)
        self.li_btn.on_click(self.on_login)
        self.logout_btn.on_click(self.on_logout)
        self.t_create.on_click(self.on_create_template)
        self.t_del_btn.on_click(self.on_delete_template)
        self.acc_btn.on_click(self.on_account_update)
        self.npages.observe(self.on_npages_change, names='value')
        self.gen_btn.on_click(self.on_generate)

        # init
        self.add_color_picker()
        self.add_page_usage()
        self.update_client_dd()

    # ---------- UI helpers ----------
    def update_client_dd(self):
        clients = self.um.get_client_list()
        opts = [("Select Client", None)] + [(c, c) for c in clients]
        self.t_client_dd.options = opts

    def update_del_dd(self):
        opts = [("Select", None)] + [(ic, ic) for ic in self.um.templates.keys()]
        self.t_del_dd.options = opts

    def add_page_usage(self, _=None):
        if len(self.page_usages) < self.npages.value:
            w = widgets.Text(value="promo" if len(self.page_usages)==0 else "guide",
                             description=f"Page {len(self.page_usages)+1} Usage:")
            self.page_usages.append(w)
            self.refresh_page_box()

    def on_npages_change(self, ch):
        while len(self.page_usages) < ch['new']: self.add_page_usage()
        while len(self.page_usages) > ch['new']: self.page_usages.pop()
        self.refresh_page_box()

    def refresh_page_box(self):
        self.page_box.children = [w for w in self.page_usages] + [self.add_page_btn]

    def add_color_picker(self, _=None):
        cp = widgets.ColorPicker(value="#ff0000")
        self.colors.append(cp)
        self.refresh_color_box()

    def refresh_color_box(self):
        rows = []
        for i, cp in enumerate(self.colors):
            cp.description = f"Color {i+1}:"
            del_btn = widgets.Button(description="Delete")
            del_btn.on_click(lambda b, c=cp: self.remove_color(c))
            rows.append(widgets.HBox([cp, del_btn]))
        rows.append(self.add_color_btn)
        self.color_box.children = rows

    def remove_color(self, cp):
        if len(self.colors) > 1:
            self.colors.remove(cp)
            self.refresh_color_box()

    # ---------- auth ----------
    def on_signup(self, _):
        u, p = self.su_user.value.strip(), self.su_pwd.value.strip()
        if not (u and p):
            with self.su_out: clear_output(); display(HTML("<p style='color:red'>All fields required</p>"))
            return
        ok, msg = self.um.create_user(u, p)
        with self.su_out: clear_output(); display(HTML(f"<p style='color:{'green' if ok else 'red'}'>{msg}</p>"))
        self.update_client_dd()

    def on_login(self, _):
        u, p = self.li_user.value.strip(), self.li_pwd.value.strip()
        if not (u and p):
            with self.li_out: clear_output(); display(HTML("<p style='color:red'>Both fields required</p>"))
            return
        ok, msg = self.um.authenticate(u, p)
        with self.li_out: clear_output(); display(HTML(f"<p style='color:{'green' if ok else 'red'}'>{msg}</p>"))
        if ok:
            clear_output(wait=True)
            display(HTML(f"<p style='color:green'>{msg}</p>"))
            time.sleep(1.5)
            clear_output(wait=True)
            display(self.post_login_ui())

    def on_logout(self, _):
        msg = self.um.logout()
        clear_output(wait=True)
        display(HTML(f"<p style='color:blue'>{msg}</p>"))
        time.sleep(1.5)
        clear_output(wait=True)
        self.show_auth_ui()

    # ---------- template ----------
    def on_create_template(self, _):
        if self.um.current_role != "master":
            with self.t_out: clear_output(); display(HTML("<p style='color:red'>Master only</p>"))
            return
        client = self.t_client_dd.value
        ic = self.t_ic.value.strip()
        content = self.t_cont.value.strip()
        if not (client and ic and content):
            with self.t_out: clear_output(); display(HTML("<p style='color:red'>All fields required</p>"))
            return
        ok, msg = self.um.create_template(ic, content, client)
        with self.t_out: clear_output(); display(HTML(f"<p style='color:{'green' if ok else 'red'}'>{msg}</p>"))
        self.update_del_dd()
        self.t_ic.value = self.t_cont.value = ""

    def on_delete_template(self, _):
        if self.um.current_role != "master":
            with self.t_out: clear_output(); display(HTML("<p style='color:red'>Master only</p>"))
            return
        ic = self.t_del_dd.value
        if not ic:
            with self.t_out: clear_output(); display(HTML("<p style='color:red'>Select a template</p>"))
            return
        ok, msg = self.um.delete_template(ic)
        with self.t_out: clear_output(); display(HTML(f"<p style='color:{'green' if ok else 'red'}'>{msg}</p>"))
        self.update_del_dd()

    # ---------- account ----------
    def on_account_update(self, _):
        if not self.um.current_user:
            with self.acc_out: clear_output(); display(HTML("<p style='color:red'>Not logged in</p>"))
            return
        cur = self.acc_cur.value.strip()
        new_u = self.acc_user.value.strip()
        np, cp = self.acc_new.value.strip(), self.acc_cnf.value.strip()
        if not cur:
            with self.acc_out: clear_output(); display(HTML("<p style='color:red'>Current password required</p>"))
            return
        if np and np != cp:
            with self.acc_out: clear_output(); display(HTML("<p style='color:red'>Passwords do not match</p>"))
            return
        ok, msg = self.um.update_user(self.um.current_user, cur, new_username=new_u or None, new_pwd=np or None)
        with self.acc_out: clear_output(); display(HTML(f"<p style='color:{'green' if ok else 'red'}'>{msg}</p>"))
        self.acc_cur.value = self.acc_new.value = self.acc_cnf.value = ""
        self.acc_user.value = self.um.current_user  # update to new name

    # ---------- generator ----------
    def on_generate(self, _):
        with self.gen_out:
            clear_output(wait=True)
            display(HTML(f"<h3>Generating {self.npages.value} page(s)â€¦</h3>"))

        prod   = self.prod.value
        topic  = self.topic.value
        msg    = self.msg.value
        tone   = self.tone.value
        spec   = self.spec.value
        colors = [webcolors.hex_to_rgb(cp.value) for cp in self.colors]

        for i, pu_w in enumerate(self.page_usages, 1):
            usage = pu_w.value
            caption, img_prompt, guide = generate_page_content(
                prod, topic, msg, tone, colors, spec, usage)

            page_out = widgets.Output()
            regen_lbl = widgets.Label(value="Regens left: 20")
            cur_urls = [None, None]
            regen_cnt = 0
            MAX_REGEN = 20

            def gen_images():
                nonlocal cur_urls, regen_cnt
                s1 = seed_manager['current']; seed_manager['current'] += 1
                s2 = seed_manager['current']; seed_manager['current'] += 1
                cur_urls = [get_pollinations_image(img_prompt, s1),
                            get_pollinations_image(img_prompt, s2)]
                with page_out:
                    clear_output(wait=True)
                    display(HTML("<h4>Option 1</h4>"))
                    if "Error" not in cur_urls[0]: display_image(cur_urls[0])
                    display(HTML("<h4>Option 2</h4>"))
                    if "Error" not in cur_urls[1]: display_image(cur_urls[1])
                # SAVE ALL GENERATED IMAGES TO HISTORY
                self.hm.record_page(self.um.current_user, {
                    "page": i,
                    "usage": usage,
                    "caption": caption,
                    "guide": guide if usage.lower() == "guide" else None,
                    "image_urls": cur_urls,  # save both URLs
                    "product": prod,
                    "topic": topic
                })
                self.display_history()  # auto-refresh

            def like(opt):
                url = cur_urls[opt-1]
                if url and "Error" not in url:
                    selected_images.append(url)
                    try:
                        r = requests.get(url); r.raise_for_status()
                        fn = f"{topic.replace(' ','_')}_{usage}_opt{opt}.png"
                        open(fn, 'wb').write(r.content)
                        files.download(fn)
                    except: pass
                    create_pdf_and_download()

            def bad(_):
                nonlocal regen_cnt
                if regen_cnt < MAX_REGEN:
                    regen_cnt += 1
                    regen_lbl.value = f"Regens left: {MAX_REGEN - regen_cnt}"
                    gen_images()
                else:
                    with page_out: print("Max regenerations reached.")

            btn1 = widgets.Button(description="I like this", style={'button_color':'green'})
            btn1.on_click(lambda b: like(1))
            btn2 = widgets.Button(description="I like that", style={'button_color':'green'})
            btn2.on_click(lambda b: like(2))
            bad_btn = widgets.Button(description="Both bad", style={'button_color':'red'})
            bad_btn.on_click(bad)

            gen_images()  # generate & save to history
            display(HTML(f"<h3>Page {i} â€“ {usage.title()}</h3>"))
            if usage.lower() != "guide":
                display(HTML("<h4>Caption</h4>"))
                print(caption)
            display(HTML(f"<h4>{usage.title()} Image Options</h4>"))
            display(page_out, regen_lbl, widgets.HBox([btn1, btn2, bad_btn]))
            if usage.lower() == "guide":
                display(HTML("<h4>Guide Text</h4>"))
                print(guide)

        self.display_history()

    # ---------- history ----------
    def display_history(self, _=None):
        self.hist_out.clear_output()
        with self.hist_out:
            if not self.um.current_user:
                display(HTML("<p style='color:red'>Not logged in</p>"))
                return
            hist = self.hm.get_user_history(self.um.current_user)
            if not hist:
                display(HTML("<p>No records yet. Generate pages!</p>"))
                return
            display(HTML(f"<h3>Past Records â€“ {self.um.current_user}</h3>"))
            for sess in reversed(hist):
                display(HTML(f"<hr><h4>{sess['timestamp']} â€“ {sess['product']} / {sess['topic']}</h4>"))
                for pg in sess.get('pages', []):
                    display(HTML(f"<b>Page {pg['page']} ({pg['usage']})</b>"))
                    if pg.get('caption'):
                        display(HTML("<u>Caption:</u>"))
                        print(pg['caption'])
                    if pg.get('guide'):
                        display(HTML("<u>Guide:</u>"))
                        print(pg['guide'])
                    display(HTML("<u>All Generated Images:</u>"))
                    for j, url in enumerate(pg.get('image_urls', [])):
                        if url and "Error" not in url:
                            display(HTML(f"Option {j+1}:"))
                            display_image(url)
                            dl_btn = widgets.Button(description="Download")
                            dl_btn.on_click(lambda b, u=url: self.download_hist_img(u))
                            display(dl_btn)
                    display(HTML("<br>"))

    def download_hist_img(self, url):
        try:
            r = requests.get(url); r.raise_for_status()
            fn = f"history_{int(time.time())}.png"
            open(fn, 'wb').write(r.content)
            files.download(fn)
        except Exception as e:
            print(f"Download error: {e}")

    # ---------- UI layout ----------
    def show_signup(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1'>Sign Up</h2>"),
            self.su_user, self.su_pwd, self.su_btn, self.su_out
        ])

    def show_login(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1'>Login</h2>"),
            self.li_user, self.li_pwd, self.li_btn, self.li_out
        ])

    def show_template_mgmt(self):
        self.update_client_dd()
        self.update_del_dd()
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1'>Template Management (Master)</h2>"),
            self.t_client_dd, self.t_ic, self.t_cont,
            self.t_create, self.t_del_dd, self.t_del_btn, self.t_out
        ])

    def show_account(self):
        if not self.um.current_user:
            return widgets.VBox([widgets.HTML("<h2 style='color:#2E86e1'>Account</h2>"),
                                 widgets.HTML("<p style='color:red'>Not logged in</p>")])
        u = self.um.users[self.um.current_user]
        self.acc_user.value = self.um.current_user  # editable
        self.acc_ic.value = u['industry_code']
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1'>Account Management</h2>"),
            self.acc_user, self.acc_ic,
            self.acc_cur, self.acc_new, self.acc_cnf,
            widgets.HTML("<small>Leave password blank to keep current</small>"),
            self.acc_btn, self.acc_out
        ])

    def show_generator(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1'>Image Generator</h2>"),
            self.prod, self.topic, self.msg, self.tone, self.spec,
            self.npages, self.page_box, self.color_box,
            self.gen_btn, self.gen_out
        ])

    def show_history_tab(self):
        return widgets.VBox([
            widgets.HTML("<h2 style='color:#2E86e1'>Past Records</h2>"),
            self.refresh_hist_btn,
            self.hist_out
        ])

    def post_login_ui(self):
        hdr = widgets.HBox([
            widgets.HTML(f"<h2 style='margin:0;flex-grow:1'>Logged in as: {self.um.current_user} ({self.um.current_role})</h2>"),
            self.logout_btn
        ])
        tabs = widgets.Tab()
        if self.um.current_role == "master":
            tabs.children = [self.show_generator(),
                             self.show_template_mgmt(),
                             self.show_history_tab(),
                             self.show_account()]
            tabs.titles = ['Image Generator', 'Template Management', 'Past Records', 'Account']
        else:
            tabs.children = [self.show_generator(),
                             self.show_history_tab(),
                             self.show_account()]
            tabs.titles = ['Image Generator', 'Past Records', 'Account']
        return widgets.VBox([hdr, tabs])

    def show_auth_ui(self):
        auth = widgets.Tab()
        auth.children = [self.show_signup(), self.show_login()]
        auth.titles = ['Sign Up', 'Login']
        display(auth)


# --------------------------------------------------------------
# 7. LAUNCH
# --------------------------------------------------------------
system = AuthImageSystem()
system.show_auth_ui()
