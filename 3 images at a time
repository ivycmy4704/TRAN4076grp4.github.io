# Step 1: Import necessary libraries
import requests
import random
import time
from PIL import Image
from io import BytesIO
import ipywidgets as widgets
from IPython.display import display, HTML
import urllib.parse
import base64

# Step 2: Define a flexible prompt template
prompt_template = """
Create a social media post for {product_name} about any topic.
Topic: {topic}
Key message: {key_message}
Written tone: {tone} (e.g., professional, exciting, friendly)
Image color scheme: {color_scheme} (use this as the dominant palette)

Output:
1. A short, engaging social media caption (50-100 words) about {topic} that aligns with the {tone} tone and incorporates the {key_message}.
2. A detailed image prompt for AI image generators, describing a photorealistic, high-detail 1024x1024 image representing {topic} in a {tone} atmosphere, using a {color_scheme} color palette, with the {key_message} subtly integrated.
"""

# Step 3: Function to generate content for any topic
def generate_content(product_name, topic, key_message, tone, color_scheme):
    # Fill the prompt template
    full_prompt = prompt_template.format(
        product_name=product_name,
        topic=topic,
        key_message=key_message,
        tone=tone,
        color_scheme=color_scheme
    )
    
    # Simulate LLM response
    caption = (
        f"Discover {topic} with {product_name}! {key_message} "
        f"Experience this {tone} journey with us. "
        f"Learn more at {product_name.lower()}.com! #{topic.replace(' ', '')}"
    )
    
    image_prompt = (
        f"A photorealistic 1024x1024 social media graphic representing {topic}, "
        f"set in a {tone} atmosphere with a {color_scheme} color palette. "
        f"The {key_message} is subtly integrated through visual elements, "
        f"high detail, professional composition, vibrant lighting."
    )
    
    return full_prompt, caption, image_prompt

# Step 4: Function to generate image using Pollinations with random seed
def get_pollinations_image(image_prompt, seed=None):
    try:
        if seed is None:
            seed = random.randint(0, 1000000)
        
        # Encode the prompt for URL
        encoded_prompt = urllib.parse.quote(image_prompt)
        
        # Use the direct image generation URL
        gen_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?seed={seed}&width=512&height=512"
        
        # Get the image
        response = requests.get(gen_url, timeout=60)
        response.raise_for_status()
        
        # Return image bytes and seed
        return response.content, seed
    except Exception as e:
        return None, f"Error generating image: {str(e)}"

# Step 5: Create UI components
form_style = {'description_width': '120px'}
input_width = '90%'

# Create input widgets
product_name = widgets.Text(
    value="BrandName",
    description="Product/Brand:",
    style=form_style,
    layout=widgets.Layout(width=input_width)
)

topic = widgets.Text(
    value="Summer Travel Destinations",
    description="Topic:",
    style=form_style,
    layout=widgets.Layout(width=input_width)
)

key_message = widgets.Text(
    value="Explore new horizons!",
    description="Key Message:",
    style=form_style,
    layout=widgets.Layout(width=input_width)
)

tone = widgets.Dropdown(
    options=['professional', 'exciting', 'friendly', 'calm', 'elegant'],
    value='professional',
    description="Tone:",
    style=form_style
)

color_scheme = widgets.ColorPicker(
    concise=False,
    value='#4682B4',  # Steel blue
    description="Color Scheme:",
    style=form_style
)

# Create output display areas
caption_output = widgets.Output()
prompt_output = widgets.Output()
image_output = widgets.Output()
status_output = widgets.Output()

# Create action buttons
generate_btn = widgets.Button(
    description="‚ú® Generate Content",
    button_style='success',
    icon='bolt',
    layout=widgets.Layout(width='250px', margin='20px 0 0 0')
)

reset_btn = widgets.Button(
    description="‚Üª Reset Form",
    button_style='warning',
    icon='refresh',
    layout=widgets.Layout(width='150px', margin='20px 0 0 10px'),
    disabled=True
)

# Step 6: Assemble UI components
input_box = widgets.VBox([
    widgets.HTML("<h2 style='color:#2E86e1'>üì± Universal Social Media Generator</h2>"),
    widgets.HTML("<i>Create posts for any topic with multiple image variations</i>"),
    product_name,
    topic,
    key_message,
    tone,
    color_scheme,
    widgets.HBox([generate_btn, reset_btn])
], layout=widgets.Layout(padding='20px', width='70%'))

output_box = widgets.VBox([
    widgets.HTML("<h3 style='border-bottom:1px solid #eee; padding-bottom:10px'>Generated Content</h3>"),
    widgets.Accordion(children=[caption_output, prompt_output], 
                     titles=('üìù Social Media Caption', 'üé® Image Prompt')),
    widgets.HTML("<h4 style='margin:25px 0 10px 0'>Generated Images</h4>"),
    status_output,
    image_output
])

# Step 7: Create UI event handlers
def on_generate_clicked(btn):
    generate_btn.disabled = True
    reset_btn.disabled = True
    
    try:
        # Clear previous outputs
        caption_output.clear_output()
        prompt_output.clear_output()
        image_output.clear_output()
        status_output.clear_output()
        
        # Show status
        with status_output:
            display(widgets.HTML(
                "<div style='text-align:center; color:#666; padding:10px'>"
                "<i class='fa fa-spinner fa-spin'></i> Generating content and images may take 20-40 seconds..."
                "</div>"
            ))
        
        # Get input values
        color_name = {
            '#ff6347': 'warm reds',
            '#4682b4': 'cool blues',
            '#32cd32': 'fresh greens'
        }.get(color_scheme.value.lower(), f"custom ({color_scheme.value})")
        
        # Generate content
        with caption_output:
            display(widgets.HTML(
                f"<div style='background:#f9f9f9; padding:15px; border-radius:5px; font-family:Arial'>"
                f"<i class='fa fa-spinner fa-spin'></i> Generating content...</div>"
            ))
        
        _, caption_text, image_prompt = generate_content(
            product_name.value,
            topic.value,
            key_message.value,
            tone.value,
            color_name
        )
        
        # Display caption
        with caption_output:
            caption_output.clear_output()
            display(widgets.HTML(
                f"<div style='background:#f9f9f9; padding:15px; border-radius:5px;"
                f"font-family:Arial; font-size:14px'>{caption_text}</div>"
            ))
        
        # Display prompt
        with prompt_output:
            display(widgets.HTML(
                f"<div style='background:#f5f7ff; padding:15px; border-radius:5px;"
                f"font-family:monospace; font-size:13px; white-space:pre-wrap'>{image_prompt}</div>"
            ))
        
        # Generate and display images
        with image_output:
            image_output.clear_output()
            display(widgets.HTML(
                f"<div style='text-align:center; margin:10px; color:#666'>"
                f"<i class='fa fa-spinner fa-spin'></i> Generating 3 unique image variations...</div>"
            ))
            
            # Generate 3 unique images
            image_widgets = []
            for i in range(3):
                # Add some variation to each prompt
                variation_prompt = f"{image_prompt}, variation {i+1}, unique composition"
                
                # Generate image
                image_bytes, seed = get_pollinations_image(variation_prompt)
                
                if image_bytes is None:
                    img_widget = widgets.HTML(
                        f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828; height:300px; display:flex; align-items:center; justify-content:center'>"
                        f"‚ùå Image failed to generate. Please try again.</div>"
                    )
                else:
                    # Create image widget
                    img_widget = widgets.Image(
                        value=image_bytes,
                        format='png',
                        width=300,
                        height=300
                    )
                
                caption = widgets.HTML(
                    f"<div style='text-align:center; font-size:12px; margin-top:5px'>"
                    f"Variation #{i+1}</div>"
                )
                image_widgets.append(widgets.VBox([img_widget, caption]))
            
            # Create grid layout
            grid = widgets.GridBox(
                image_widgets,
                layout=widgets.Layout(
                    grid_template_columns='repeat(3, 320px)',
                    grid_gap='10px',
                    justify_content='center'
                )
            )
            
            with image_output:
                image_output.clear_output()
                display(grid)
        
        # Enable reset button after successful generation
        reset_btn.disabled = False
        
    except Exception as e:
        with status_output:
            display(widgets.HTML(
                f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                f"üö´ Error: {str(e)}</div>"
            ))
    finally:
        generate_btn.disabled = False
        status_output.clear_output()

def on_reset_clicked(btn):
    # Reset input fields to default values
    product_name.value = "BrandName"
    topic.value = "Summer Travel Destinations"
    key_message.value = "Explore new horizons!"
    tone.value = 'professional'
    color_scheme.value = '#4682B4'
    
    # Clear all output areas
    caption_output.clear_output()
    prompt_output.clear_output()
    image_output.clear_output()
    status_output.clear_output()
    
    # Disable reset button until next generation
    reset_btn.disabled = True
    
    # Display reset confirmation
    with caption_output:
        display(widgets.HTML(
            f"<div style='background:#e3f2fd; padding:15px; border-radius:5px; color:#1565c0; text-align:center'>"
            f"‚úÖ Form reset! Fill in new values and click Generate</div>"
        ))

# Attach event handlers
generate_btn.on_click(on_generate_clicked)
reset_btn.on_click(on_reset_clicked)

# Step 8: Display the UI
display(widgets.VBox([
    widgets.HTML("""
    <style>
        h1, h2, h3, h3 { font-family: Arial; }
        .widget-label { font-weight: bold !important; }
        .output_image img { 
            box-shadow: 0 4px 8px rgba(0,0,0,0.1); 
            border-radius: 8px;
            border: 1px solid #eee;
        }
        .success-badge { 
            background: #2ecc71; 
            color: white; 
            padding: 5px 10px; 
            border-radius: 20px; 
            display: inline-block;
            margin-bottom: 10px;
        }
        .image-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-top: 20px;
        }
        .image-container {
            text-align: center;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    """),
    widgets.HBox([
        input_box,
        output_box
    ], layout=widgets.Layout(height='100%'))
]))
