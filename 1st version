from PIL import Image, ImageDraw, ImageFont
import ipywidgets as widgets
from IPython.display import display, clear_output
import io
import base64

# Data
products = [
    {"name": "EcoWave Water Bottle", "description": "Stay hydrated. Stay green."},
    {"name": "EcoWave Lunch Box", "description": "Pack smart. Waste less."},
    {"name": "EcoWave Reusable Bag", "description": "Carry the change."},
]
color_schemes = [
    {"name": "Fresh Green", "bg": "#E6F4EA", "accent": "#3BB273"},
    {"name": "Ocean Blue", "bg": "#E3F2FD", "accent": "#1976D2"},
    {"name": "Sunny Yellow", "bg": "#FFF9C4", "accent": "#FFD600"},
]

# Widgets
product_dd = widgets.Dropdown(
    options=[(p["name"], idx) for idx, p in enumerate(products)],
    value=0,
    description='Product:'
)
color_dd = widgets.Dropdown(
    options=[(c["name"], idx) for idx, c in enumerate(color_schemes)],
    value=0,
    description='Color:'
)
tagline = widgets.Text(
    value=products[0]["description"],
    description='Tagline:'
)

# Store image for download
poster_img_holder = {'img': None}

def update_tagline(change):
    tagline.value = products[product_dd.value]["description"]
product_dd.observe(update_tagline, 'value')

preview_btn = widgets.Button(description="Preview Poster", button_style="success")
dl_btn = widgets.Button(description="Download Poster", button_style="info")
out = widgets.Output()

def draw_icon(draw, kind, x, y, size, maincolor):
    # Water bottle: Tall rectangle with cap
    if kind == "EcoWave Water Bottle":
        draw.rectangle([x-size//4, y-size//2, x+size//4, y+size//2], fill=maincolor, outline="#222", width=2)
        draw.rectangle([x-size//8, y-size//2-6, x+size//8, y-size//2], fill="#aaa", outline="#222", width=2)
    # Lunch Box: Rectangle with lid
    elif kind == "EcoWave Lunch Box":
        draw.rectangle([x-size//2+6, y-size//6, x+size//2-6, y+size//2], fill=maincolor, outline="#222", width=2)
        draw.rectangle([x-size//2, y-size//3-12, x+size//2, y-size//3+6], fill="#bbb", outline="#222", width=2)
    # Reusable Bag: Rounded rectangle with handle
    elif kind == "EcoWave Reusable Bag":
        draw.rounded_rectangle([x-size//2, y-size//6, x+size//2, y+size//2], radius=24, fill=maincolor, outline="#222", width=2)
        draw.arc([x-size//4, y-size//2-2, x+size//4, y-size//5+2], 180, 360, fill="#222", width=5)

def hex_to_rgb(hx):
    hx = hx.lstrip("#")
    return tuple(int(hx[i:i+2], 16) for i in (0, 2, 4))

def get_text_size(draw, text, font):
    box = draw.textbbox((0, 0), text, font=font)
    width = box[2] - box[0]
    height = box[3] - box[1]
    return width, height

def make_poster(product, color, tagline_text):
    W, H = 480, 640
    img = Image.new("RGB", (W, H), hex_to_rgb(color["bg"]))
    draw = ImageDraw.Draw(img)

    font_main = ImageFont.load_default()
    try:
        font_title = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 32)
        font_tagline = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Oblique.ttf", 21)
        font_brand = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 18)
    except:
        font_title = font_tagline = font_brand = font_main

    # Icon
    draw_icon(draw, product["name"], W//2, 170, 120, color["accent"])

    # Product Name
    title = product["name"]
    w_title, h_title = get_text_size(draw, title, font_title)
    draw.text(((W-w_title)//2, 60), title, font=font_title, fill=color["accent"])

    # Tagline
    tagline_disp = f'"{tagline_text}"'
    w_tag, h_tag = get_text_size(draw, tagline_disp, font_tagline)
    draw.text(((W-w_tag)//2, 270), tagline_disp, font=font_tagline, fill="#333")

    # Brand
    brand = "EcoWave"
    w_brand, h_brand = get_text_size(draw, brand, font_brand)
    draw.text((W-w_brand-36, H-h_brand-42), brand, font=font_brand, fill=color["accent"])

    return img

def preview_handler(b):
    out.clear_output()
    p = products[product_dd.value]
    c = color_schemes[color_dd.value]
    img = make_poster(p, c, tagline.value)
    poster_img_holder['img'] = img
    with out:
        display(img)

def download_handler(b):
    img = poster_img_holder.get('img')
    if img is None:
        with out:
            clear_output()
            display(widgets.HTML("<b>Please click 'Preview Poster' first!</b>"))
        return
    buf = io.BytesIO()
    img.save(buf, format="PNG")
    data = base64.b64encode(buf.getvalue()).decode()
    fname = products[product_dd.value]["name"].replace(" ", "_") + "_poster.png"
    html = f'<a download="{fname}" href="data:image/png;base64,{data}">Click here to download your poster!</a>'
    with out:
        display(img)
        display(widgets.HTML(html))

preview_btn.on_click(preview_handler)
dl_btn.on_click(download_handler)

ui = widgets.VBox([product_dd, color_dd, tagline, preview_btn, dl_btn, out])
display(ui)
