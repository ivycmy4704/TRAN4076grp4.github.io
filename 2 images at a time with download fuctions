# Step 1: Import necessary libraries
import requests
import random
import time
import ipywidgets as widgets
from IPython.display import display, HTML, Javascript
import urllib.parse
import base64
import datetime
import os
import json
from collections import deque

# Step 2: Define templates and state management with persistent storage
class TemplateManager:
    HISTORY_FILE = "social_media_history.json"
    MAX_HISTORY = 3  # Keep only last 3 runs

    def __init__(self):
        self.templates = {
            "Travel": {
                "topic": "Summer Travel Destinations",
                "key_message": "Explore new horizons!",
                "tone": "exciting"
            },
            "Food": {
                "topic": "Gourmet Cooking",
                "key_message": "Taste the difference!",
                "tone": "friendly"
            },
            "Technology": {
                "topic": "Latest Gadgets",
                "key_message": "Innovation at your fingertips",
                "tone": "professional"
            },
            "Fitness": {
                "topic": "Home Workouts",
                "key_message": "Transform your body",
                "tone": "motivational"
            },
            "Fashion": {
                "topic": "Summer Collection",
                "key_message": "Style that speaks",
                "tone": "trendy"
            }
        }
        self.selected_template = None
        self.regeneration_count = 0
        self.max_regenerations = 20
        self.history = deque(maxlen=self.MAX_HISTORY)
        self.load_history()

    def load_history(self):
        """Load history from file if exists"""
        if os.path.exists(self.HISTORY_FILE):
            try:
                with open(self.HISTORY_FILE, 'r') as f:
                    history_data = json.load(f)
                    # Convert to deque with maxlen
                    self.history = deque(history_data, maxlen=self.MAX_HISTORY)
            except:
                self.history = deque(maxlen=self.MAX_HISTORY)

    def save_history(self):
        """Save history to file"""
        with open(self.HISTORY_FILE, 'w') as f:
            json.dump(list(self.history), f)

    def record_session(self, session_data):
        """Record a session to history"""
        # Convert image bytes to base64 strings for JSON serialization
        session_data['images'] = [
            base64.b64encode(img).decode('utf-8') if img else None
            for img in session_data['images']
        ]
        self.history.append(session_data)
        self.save_history()

    def select_template(self, name):
        self.selected_template = name
        self.regeneration_count = 0

# Step 3: Create template manager instance
template_manager = TemplateManager()

# Step 4: Define a flexible prompt template
prompt_template = """
Create a social media post for {product_name} about any topic.
Topic: {topic}
Key message: {key_message}
Written tone: {tone} (e.g., professional, exciting, friendly)
Image color scheme: {color_scheme} (use this as the dominant palette)

Output:
1. A short, engaging social media caption (50-100 words) about {topic} that aligns with the {tone} tone and incorporates the {key_message}.
2. A detailed image prompt for AI image generators, describing a photorealistic, high-detail 1024x1024 image representing {topic} in a {tone} atmosphere, using a {color_scheme} color palette, with the {key_message} subtly integrated.
"""

# Step 5: Function to generate content for any topic
def generate_content(product_name, topic, key_message, tone, color_scheme):
    # Fill the prompt template
    full_prompt = prompt_template.format(
        product_name=product_name,
        topic=topic,
        key_message=key_message,
        tone=tone,
        color_scheme=color_scheme
    )

    # Simulate LLM response
    caption = (
        f"Discover {topic} with {product_name}! {key_message} "
        f"Experience this {tone} journey with us. "
        f"Learn more at {product_name.lower()}.com! #{topic.replace(' ', '')}"
    )

    image_prompt = (
        f"A photorealistic 1024x1024 social media graphic representing {topic}, "
        f"set in a {tone} atmosphere with a {color_scheme} color palette. "
        f"The {key_message} is subtly integrated through visual elements, "
        f"high detail, professional composition, vibrant lighting."
    )

    return full_prompt, caption, image_prompt

# Step 6: Function to generate image using Pollinations with random seed
def get_pollinations_image(image_prompt, seed=None):
    try:
        if seed is None:
            seed = random.randint(0, 1000000)

        # Encode the prompt for URL
        encoded_prompt = urllib.parse.quote(image_prompt)

        # Use the direct image generation URL
        gen_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?seed={seed}&width=512&height=512"

        # Get the image
        response = requests.get(gen_url, timeout=60)
        response.raise_for_status()

        # Return image bytes and seed
        return response.content, seed
    except Exception as e:
        return None, f"Error generating image: {str(e)}"

# Step 7: Create UI components
form_style = {'description_width': '120px'}
input_width = '90%'

# Create input widgets
product_name = widgets.Text(
    value="BrandName",
    description="Product/Brand:",
    style=form_style,
    layout=widgets.Layout(width=input_width)
)

color_scheme = widgets.ColorPicker(
    concise=False,
    value='#4682B4',  # Steel blue
    description="Color Scheme:",
    style=form_style
)

# Create template selection
template_checkboxes = []
for name in template_manager.templates:
    cb = widgets.Checkbox(
        value=False,
        description=name,
        indent=False,
        layout=widgets.Layout(width='auto', margin='0 0 5px 10px')
    )
    template_checkboxes.append(cb)

template_box = widgets.VBox([
    widgets.HTML("<b>Select Template:</b>"),
    widgets.VBox(template_checkboxes)
], layout=widgets.Layout(margin='15px 0'))

# Create output display areas
caption_output = widgets.Output()
prompt_output = widgets.Output()
image_output = widgets.Output()
status_output = widgets.Output()
feedback_output = widgets.Output()
history_output = widgets.Output()

# Create action buttons
generate_btn = widgets.Button(
    description="‚ú® Generate Images",
    button_style='success',
    icon='bolt',
    layout=widgets.Layout(width='250px', margin='20px 0 0 0')
)

# Create feedback buttons
like_this_btn = widgets.Button(
    description="üëç I like this",
    button_style='success',
    tooltip="Download first image",
    layout=widgets.Layout(width='150px')
)

like_that_btn = widgets.Button(
    description="üëç I like that",
    button_style='success',
    tooltip="Download second image",
    layout=widgets.Layout(width='150px')
)

both_bad_btn = widgets.Button(
    description="üëé Both bad",
    button_style='danger',
    tooltip="Regenerate new versions",
    layout=widgets.Layout(width='150px')
)

feedback_buttons = widgets.HBox(
    [like_this_btn, like_that_btn, both_bad_btn],
    layout=widgets.Layout(justify_content='center', margin='20px 0')
)

# Create tab navigation
tab_nav = widgets.ToggleButtons(
    options=['Content Generator', 'Past Records'],
    value='Content Generator',
    button_style='',
    tooltips=['Create new content', 'View history of generated images'],
    layout=widgets.Layout(width='100%', margin='0 0 20px 0')
)

# Step 8: Assemble UI components
content_generator_tab = widgets.VBox([
    widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>üì± Template-Based Social Media Generator</h2>"),
    widgets.HTML("<i>Select an industry template and generate images with feedback options</i>"),
    product_name,
    color_scheme,
    template_box,
    generate_btn,
    widgets.HTML("<h3 style='border-bottom:1px solid #eee; padding-bottom:10px; margin-top:20px'>Generated Content</h3>"),
    widgets.Accordion(children=[caption_output, prompt_output],
                     titles=('üìù Social Media Caption', 'üé® Image Prompt')),
    widgets.HTML("<h4 style='margin:25px 0 10px 0'>Generated Images</h4>"),
    status_output,
    image_output,
    feedback_output
], layout=widgets.Layout(padding='20px'))

past_records_tab = widgets.VBox([
    widgets.HTML("<h2 style='color:#2E86e1; margin-top:0'>üìö Past Records</h2>"),
    widgets.HTML("<i>History of your last 3 generated image sets</i>"),
    history_output
], layout=widgets.Layout(padding='20px'))

# Create tab container
tab_container = widgets.VBox([content_generator_tab])

# Step 9: Create UI event handlers
def download_image(image_bytes, filename_prefix="image"):
    """Trigger image download from browser"""
    filename = f"{filename_prefix}_{int(time.time())}.png"
    b64 = base64.b64encode(image_bytes).decode()
    payload = f"data:image/png;base64,{b64}"
    js = f"""
    var a = document.createElement('a');
    a.href = '{payload}';
    a.download = '{filename}';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    """
    display(Javascript(js))

def generate_images():
    """Generate images based on selected template"""
    # Clear previous outputs
    caption_output.clear_output()
    prompt_output.clear_output()
    image_output.clear_output()
    feedback_output.clear_output()
    status_output.clear_output()

    # Check template selection
    selected = None
    for cb in template_checkboxes:
        if cb.value:
            selected = cb.description
            break

    if not selected:
        with status_output:
            display(widgets.HTML(
                "<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                "‚ö†Ô∏è Please select a template first!</div>"
            ))
        return

    # Update template manager
    template_manager.select_template(selected)
    template_data = template_manager.templates[selected]

    # Show status
    with status_output:
        display(widgets.HTML(
            "<div style='text-align:center; color:#666; padding:10px'>"
            "<i class='fa fa-spinner fa-spin'></i> Generating content and images may take 20-40 seconds..."
            "</div>"
        ))

    # Get input values
    color_name = {
        '#ff6347': 'warm reds',
        '#4682b4': 'cool blues',
        '#32cd32': 'fresh greens'
    }.get(color_scheme.value.lower(), f"custom ({color_scheme.value})")

    # Generate content
    with caption_output:
        display(widgets.HTML(
            f"<div style='background:#f9f9f9; padding:15px; border-radius:5px; font-family:Arial'>"
            f"<i class='fa fa-spinner fa-spin'></i> Generating content...</div>"
        ))

    _, caption_text, image_prompt = generate_content(
        product_name.value,
        template_data["topic"],
        template_data["key_message"],
        template_data["tone"],
        color_name
    )

    # Display caption
    with caption_output:
        caption_output.clear_output()
        display(widgets.HTML(
            f"<div style='background:#f9f9f9; padding:15px; border-radius:5px;"
            f"font-family:Arial; font-size:14px'>{caption_text}</div>"
        ))

    # Display prompt
    with prompt_output:
        display(widgets.HTML(
            f"<div style='background:#f5f7ff; padding:15px; border-radius:5px;"
            f"font-family:monospace; font-size:13px; white-space:pre-wrap'>{image_prompt}</div>"
        ))

    # Generate and display images
    with image_output:
        image_output.clear_output()
        display(widgets.HTML(
            f"<div style='text-align:center; margin:10px; color:#666'>"
            f"<i class='fa fa-spinner fa-spin'></i> Generating 2 unique image variations...</div>"
        ))

        # Generate 2 unique images
        image_widgets = []
        image_data = []  # Store image bytes for feedback

        for i in range(2):
            # Add some variation to each prompt
            variation_prompt = f"{image_prompt}, variation {i+1}, unique composition"

            # Generate image
            image_bytes, seed = get_pollinations_image(variation_prompt)
            image_data.append(image_bytes)

            if image_bytes is None:
                img_widget = widgets.HTML(
                    f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828; height:300px; display:flex; align-items:center; justify-content:center'>"
                    f"‚ùå Image failed to generate. Please try again.</div>"
                )
            else:
                # Create image widget
                img_widget = widgets.Image(
                    value=image_bytes,
                    format='png',
                    width=300,
                    height=300
                )

            caption = widgets.HTML(
                f"<div style='text-align:center; font-size:12px; margin-top:5px'>"
                f"Variation #{i+1}</div>"
            )
            image_widgets.append(widgets.VBox([img_widget, caption]))

        # Create grid layout
        grid = widgets.GridBox(
            image_widgets,
            layout=widgets.Layout(
                grid_template_columns='repeat(2, 320px)',
                grid_gap='20px',
                justify_content='center'
            )
        )

        with image_output:
            image_output.clear_output()
            display(grid)

        # Show feedback buttons
        with feedback_output:
            feedback_output.clear_output()
            display(feedback_buttons)

            # Store image data for feedback handlers
            feedback_output.image_data = image_data
            feedback_output.template_name = selected
            feedback_output.session_data = {
                "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "template": selected,
                "product": product_name.value,
                "images": image_data
            }

        # Save this session to history immediately
        template_manager.record_session(feedback_output.session_data)

def on_generate_clicked(btn):
    generate_btn.disabled = True
    try:
        generate_images()
    except Exception as e:
        with status_output:
            display(widgets.HTML(
                f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                f"üö´ Error: {str(e)}</div>"
            ))
    finally:
        generate_btn.disabled = False

def on_like_this_clicked(btn):
    if hasattr(feedback_output, 'image_data') and feedback_output.image_data[0]:
        download_image(feedback_output.image_data[0], f"{feedback_output.template_name}_1")
        with feedback_output:
            display(widgets.HTML(
                "<div style='background:#e8f5e9; padding:10px; border-radius:5px; color:#2e7d32; text-align:center'>"
                "‚úÖ First image downloaded!</div>"
            ))

def on_like_that_clicked(btn):
    if hasattr(feedback_output, 'image_data') and feedback_output.image_data[1]:
        download_image(feedback_output.image_data[1], f"{feedback_output.template_name}_2")
        with feedback_output:
            display(widgets.HTML(
                "<div style='background:#e8f5e9; padding:10px; border-radius:5px; color:#2e7d32; text-align:center'>"
                "‚úÖ Second image downloaded!</div>"
            ))

def on_both_bad_clicked(btn):
    if template_manager.regeneration_count >= template_manager.max_regenerations:
        with feedback_output:
            display(widgets.HTML(
                "<div style='background:#fff8e1; padding:10px; border-radius:5px; color:#f57f17; text-align:center'>"
                "‚ö†Ô∏è Maximum regenerations reached (20 attempts). Please select a new template.</div>"
            ))
        return

    template_manager.regeneration_count += 1
    with feedback_output:
        display(widgets.HTML(
            f"<div style='text-align:center; color:#666; padding:10px'>"
            f"<i class='fa fa-spinner fa-spin'></i> Regenerating images... "
            f"(Attempt {template_manager.regeneration_count}/{template_manager.max_regenerations})</div>"
        ))

    try:
        generate_images()
    except Exception as e:
        with feedback_output:
            display(widgets.HTML(
                f"<div style='background:#ffebee; padding:15px; border-radius:5px; color:#c62828'>"
                f"üö´ Error: {str(e)}</div>"
            ))

def display_history():
    """Display the history of generated images"""
    history_output.clear_output()
    with history_output:
        if not template_manager.history:
            display(widgets.HTML(
                "<div style='text-align:center; padding:40px; color:#666; font-style:italic'>"
                "No history found. Generate some images first!</div>"
            ))
            return

        display(widgets.HTML("<div style='history-container'>"))
        for i, session in enumerate(template_manager.history):
            # Convert base64 strings back to bytes for display
            images = []
            for img_base64 in session['images']:
                if img_base64:
                    images.append(base64.b64decode(img_base64))
                else:
                    images.append(None)

            display(widgets.HTML(
                f"<div class='history-card'>"
                f"<h3 style='border-bottom:1px solid #eee; padding-bottom:10px'>"
                f"Session {len(template_manager.history)-i} - {session['template']}</h3>"
                f"<p><b>Date:</b> {session['timestamp']}</p>"
                f"<p><b>Product:</b> {session['product']}</p>"
            ))

            # Display images
            images_row = []
            for j, img_bytes in enumerate(images):
                if img_bytes:
                    img_widget = widgets.Image(
                        value=img_bytes,
                        format='png',
                        width=200,
                        height=200
                    )
                    download_btn = widgets.Button(
                        description=f"Download Image {j+1}",
                        layout=widgets.Layout(width='150px', margin='10px 0')
                    )
                    download_btn.on_click(lambda btn, img=img_bytes, idx=j:
                        download_image(img, f"{session['template']}_{idx+1}"))
                    images_row.append(widgets.VBox(
                        [img_widget, download_btn],
                        layout=widgets.Layout(align_items='center')
                    ))
            display(widgets.HBox(images_row, layout=widgets.Layout(justify_content='space-around')))
            display(widgets.HTML("</div><hr style='margin:20px 0'>"))
        display(widgets.HTML("</div>"))

def on_tab_change(change):
    """Handle tab navigation"""
    if change['new'] == 'Past Records':
        tab_container.children = [past_records_tab]
        display_history()
    else:
        tab_container.children = [content_generator_tab]

# Attach event handlers
generate_btn.on_click(on_generate_clicked)
like_this_btn.on_click(on_like_this_clicked)
like_that_btn.on_click(on_like_that_clicked)
both_bad_btn.on_click(on_both_bad_clicked)
tab_nav.observe(on_tab_change, names='value')

# Step 10: Display the UI
display(widgets.VBox([
    widgets.HTML("""
    <style>
        h1, h2, h3, h3 { font-family: Arial; }
        .widget-label { font-weight: bold !important; }
        .output_image img {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border-radius: 8px;
            border: 1px solid #eee;
        }
        .success-badge {
            background: #2ecc71;
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            display: inline-block;
            margin-bottom: 10px;
        }
        .image-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-top: 20px;
        }
        .image-container {
            text-align: center;
        }
        .feedback-buttons {
            margin-top: 20px;
        }
        .history-card {
            background: #f9f9f9;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .history-container {
            max-height: 70vh;
            overflow-y: auto;
            padding-right: 10px;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    """),
    tab_nav,
    tab_container
]))
